%h2.py-3
  Transcribe
  = @work.title

- if !@pages.blank?
  - page = @pages.first
  = form_tag update_page_path(page), :method => :put do
    .row
      %div.mx-auto
        = paginate @pages

    .container-lg.work-metadata
    .row
      .col
        #map{ :style => "height: 800px" }
        -# .viewer-wrapper
        -#   %iframe{:height => "800", :width => "600", :allowfullscreen => "true", "aria-label" => "image view", :frameborder => "0", :src => "#{universal_viewer_base_url}#?manifest=#{single_manifest_path(page.thumbnail)}&config=#{universal_viewer_config_url}"}
      .col
        .form-group
          %textarea#transcription.form-control.min-vh-100{:name => "page_text", :rows => "3"}
            = page.text
    .row
      .col
      .col
        %input.btn.btn-primary.float-right{:href => "#", :role => "button", :type => "submit", :value => "Update"}

    %br

    .row
      %table.table.table-bordered
        %tbody
          - page.notes.each_with_index do |note|
            %tr
              %td.align-middle
                %h6 2
            %tr
              %td{:colspan => "3"}
                %h6 Comments
                .input-group.mb-3
                  %input.form-control{"aria-describedby" => "basic-addon3", "aria-label" => "Comment Text", :placeholder => "Comment Text", :type => "text"}/
                  .input-group-append
                    %button.btn.btn-outline-primary{:type => "button"} Add Comment

    .row
      %div.mx-auto
        = paginate @pages

:javascript
  var map;
  var drawControl;

  function getUniqueColor(n) {
    const rgb = [0, 0, 0];

    for (let i = 0; i < 24; i++) {
      rgb[i%3] <<= 1;
      rgb[i%3] |= n & 0x01;
      n >>= 1;
    }

    return '#' + rgb.reduce((a, c) => (c > 0x0f ? c.toString(16) : '0' + c.toString(16)) + a, '');
  }

  window.onload = function() {
    tinymce.init({
      selector: 'textarea#transcription',
      branding: false,
      statusbar: false,
      plugins: false,
      toolbar: false,
      menubar: false,
      protect: [/[\n\f\r\t\v]/g],
      extended_valid_elements : "gap,unclear,hi,special",
      custom_elements: "gap,unclear,hi,special",
      content_css: "/editor.css"
    });

    ed = tinymce.activeEditor;

    map = L.map('map', {
      center: [0, 0],
      crs: L.CRS.Simple,
      scrollWheelZoom: false,
      zoom: 0
    });

    var baseLayer = L.tileLayer.iiif(
      "#{iiif_url}/2/#{page.thumbnail}/info.json"
    ).addTo(map);

    // Initialise the FeatureGroup to store editable layers
    var drawnItems = new L.FeatureGroup();
    map.addLayer(drawnItems);

    // Initialise the draw control and pass it the FeatureGroup of editable layers
    drawControl = new L.Control.Draw({
      draw : {
        position : 'topleft',
        polygon : false,
        polyline : false,
        marker : false,
        circlemarker : false,
        circle : false
      }
    });

    map.addControl(drawControl);

    map.on(L.Draw.Event.CREATED, function (e) {
      var type = e.layerType
      var layer = e.layer;

      e.layer.options.color = getUniqueColor(Math.floor(Math.random() * 1024) + 1);
      e.layer.bindTooltip('Hi There!');

      // Do whatever else you need to. (save to db, add to map etc)
      //const corners = e.layer.getBounds();

      //const northwest = corners.getNorthWest();
      //const northeast = corners.getNorthEast();
      //const southeast = corners.getSouthEast();
      //const southwest = corners.getSouthWest();

      //console.log([northwest, northeast, southeast, southwest]);

      //console.log(e.layer.toGeoJSON());
      //console.log(e.layer.getLatLngs());

      drawnItems.addLayer(layer);
    });


  }

-# new L.Draw.Rectangle(map, drawControl.options.rectangle).enable();
