%h2.py-3
  Transcribe
  = @work.title

- if !@pages.blank?
  - @page = @pages.first

  .row
    %div.mx-auto
      = paginate @pages

  .container-lg.work-metadata
  = form_tag update_page_path(@page), :method => :put do
    .row
      .col
        #map{ :style => "height: 800px" }
        -# .viewer-wrapper
        -#   %iframe{:height => "800", :width => "600", :allowfullscreen => "true", "aria-label" => "image view", :frameborder => "0", :src => "#{universal_viewer_base_url}#?manifest=#{single_manifest_path(page.thumbnail)}&config=#{universal_viewer_config_url}"}
      .col
        .form-group
          %textarea#transcription.form-control.min-vh-100{:name => "page_text", :rows => "3"}
            = @page.text
    .row
      .col
      .col
        %input.btn.btn-primary.float-right{:href => "#", :role => "button", :type => "submit", :value => "Update"}

  %br

  #notes.row
    = render 'notes/table'

  .row
    %div.mx-auto
      = paginate @pages

:javascript
  var map;
  var drawControl;

  function drawRegions() {
    drawnItems.eachLayer(function (layer) {
      drawnItems.removeLayer(layer);
    });
    $.get( "#{page_path(@page)}", function( data ) {
      data["notes"].forEach((note, index) => {
        layer =  new L.rectangle(note.region);
        layer._leaflet_id = note.noid;
        layer.bindTooltip(note.noid);
        layer.options.color = note.color;
        drawnItems.addLayer(layer);
      });
    });
  }

  function getUniqueColor(n) {
    const rgb = [0, 0, 0];

    for (let i = 0; i < 24; i++) {
      rgb[i%3] <<= 1;
      rgb[i%3] |= n & 0x01;
      n >>= 1;
    }

    return '#' + rgb.reduce((a, c) => (c > 0x0f ? c.toString(16) : '0' + c.toString(16)) + a, '');
  }

  window.onload = function() {
    tinymce.PluginManager.add('example', function(editor, url) {

      editor.ui.registry.addButton('gap_btn', {
        text: 'Gap',
        onAction: function () {
          // Open window
          editor.selection.setContent("<gap>" + editor.selection.getContent() + "</gap>");
        }
      });
      editor.ui.registry.addButton('unclear_btn', {
        text: 'Unclear',
        onAction: function () {
          // Open window
          editor.selection.setContent("<unclear>" + editor.selection.getContent() + "</unclear>");
        }
      });
      editor.ui.registry.addButton('hi_btn', {
        text: 'Highlight',
        onAction: function () {
          // Open window
          editor.selection.setContent("<hi>" + editor.selection.getContent() + "</hi>");
        }
      });
      editor.ui.registry.addButton('special_btn', {
        text: 'Special',
        onAction: function () {
          // Open window
          editor.selection.setContent("<special>" + editor.selection.getContent() + "</special>");
        }
      });

      return {
        getMetadata: function () {
          return  {
            name: "Example plugin",
            url: "http://exampleplugindocsurl.com"
          };
        }
      };
    });

    tinymce.init({
      selector: 'textarea#transcription',
      branding: false,
      statusbar: false,
      plugins: ["example", "code"],
      toolbar: "gap_btn | unclear_btn | hi_btn | special_btn | removeformat | code",
      menubar: false,
      protect: [/[\n\f\r\t\v]/g],
      extended_valid_elements : "gap,unclear,hi,special",
      custom_elements: "gap,unclear,hi,special",
      formats: {
        removeformat: [
          // Configures `clear formatting` to remove specified elements regardless of its attributes
          { selector: 'gap,unclear,hi,special', remove: 'all' }
        ]
      },
      content_css: "/editor.css"
    });

    //editor.insertContent('<gap>BUTTS</gap>');

    map = L.map('map', {
      center: [0, 0],
      crs: L.CRS.Simple,
      scrollWheelZoom: false,
      zoom: 0
    });

    var baseLayer = L.tileLayer.iiif(
      "#{iiif_url}/2/#{@page.thumbnail}/info.json"
    ).addTo(map);

    // Initialise the FeatureGroup to store editable layers
    drawnItems = new L.FeatureGroup();
    map.addLayer(drawnItems);

    // Initialise the draw control and pass it the FeatureGroup of editable layers
    drawControl = new L.Control.Draw({
      draw : {
        position : 'topleft',
        polygon : false,
        polyline : false,
        marker : false,
        circlemarker : false,
        circle : false
      }
    });

    map.addControl(drawControl);

    map.on(L.Draw.Event.CREATED, function (e) {
      var type = e.layerType
      var layer = e.layer;

      //var lid = L.stamp(layer);
      //var noid = "#{mint_id}";
      var noid;
      $.post({
        url: "#{mint_id_path}",
        dataType: "html"
      }).done(function(response) {
        noid = response;
        var color = getUniqueColor(Math.floor(Math.random() * 1024) + 1);

        e.layer._leaflet_id = noid;
        e.layer.options.color = color;
        e.layer.bindTooltip(noid.toString());

        drawnItems.addLayer(layer);

        var exportObject = {
          "noid": noid,
          "color": color,
          "page_id": "#{@page.id}",
          "latlng": JSON.stringify(layer._latlngs)
        };

        $('div#notes').html("<div class='col text-center'><div class='spinner-border' role='status'><span class='sr-only'>Loading...</span></div></div><br/><br/>");

        $.post({
          url: "#{notes_path}",
          data : exportObject,
          dataType: "html"
        }).done(function(response) {
            $('div#notes').html(response);
            $('#' + noid)[0].scrollIntoView();
            $('#' + noid).parent().parent().delay(100).fadeOut().fadeIn('slow');
        });
      });
    });

    drawRegions();
  }

-# new L.Draw.Rectangle(map, drawControl.options.rectangle).enable();
